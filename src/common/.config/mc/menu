shell_patterns=0

# this is NOT bash, but plain sh
# see: https://midnight-commander.org/ticket/3423?cversion=0&cnum_hist=8

##############################################################################
#  Conditions syntax (`+ t t`, `= t D` etc.)
#  =================
#
#  see also: http://www.softpanorama.org/OFM/MC/user_menu.shtml
#  for examples see: /etc/mc/mc.menu
#
#  ## 1. Visibility conditions
#
#  - `=` default, menu item is always visible
#  - `+` visibility with add-on conditions
#
#  ## 2. Sub-conditions
#
#  - `f <pattern>`  = current file matching pattern
#  - `F <pattern>`  = other file matching pattern
#  - `d <pattern>`  = current directory matching pattern
#  - `D <pattern>`  = other directory matching pattern
#  - `t <type>`     = current file of type, see section 3.
#  - `T <type>`     = other file of type, see section 3.
#  - `! <sub-cond>` = negate the result of sub-condition
#
#  ## 3. t/T types
#
#  - `n` = not directory
#  - `r` = regular file
#  - `d` = directory
#  - `l` = link
#  - `c` = char special
#  - `b` = block special
#  - `f` = fifo
#  - `s` = socket
#  - `x` = executable
#  - `t` = tagged
#
##############################################################################
#  Macro syntax
#  ============
#
#  %%  The % character
#  %f  The current file (if non-local vfs, file will be copied locally and
#                        %f will be full path to it)
#  %p  The current file
#  %d  The current working directory (%D for the other panel)
#  %s  "Selected files"; the tagged files if any, otherwise the current file
#  %t  Tagged files
#  %u  Tagged files (and they are untagged on return from expand_format)
#  %view Runs the commands and pipes standard output to the view command
#  If %view is immediately followed by '{', recognize keywords
#  ascii, hex, nroff and unform
#
#  If the format letter is in uppercase, it refers to the other panel
#
#  With a number followed the % character you can turn quoting on (default)
#  and off. For example:
#  %f    quote expanded macro
#  %1f   ditto
#  %0f   don't quote expanded macro
##############################################################################

+ ! t t
@       Do something on the current file
        CMD=%{Enter command}
        $CMD %f

+ t t
@       Do something on the tagged files (for loop)
        CMD=%{Enter command}
        for i in %t ; do
            $CMD "$i"
        done

# copy path and filename to primary and secondary clipboard buffers
# - if the topmost ".." is selected then copies only the path part
# - sed will escape spaces, but multiple spaces will be collapsed, sry
# - %s (which is single + multi combined) would be nicer, but that's kinda complicated
# ----------------------------------------------------------------------------
+ ! t t
C       Copy path with filename to clipboard
        FN=%d/%f
        if [ %f = ".." ]; then
            FN=%d
        fi
        echo -n $FN | sed 's/ /\\ /g' | xclip -i -sel p -f | xclip -i -sel c

+ t t
C       Copy paths with filename to clipboard
        FN=""
        for i in %t ; do
            FN="${FN}%d/${i}\n"
        done
        echo -n $FN | sed 's/ /\\ /g' | xclip -i -sel p -f | xclip -i -sel c

# clipboard files
# - cut/copy/paste using desktop environment "clipboard buffers"
# - requires https://github.com/larspontoppidan/clipboard-files
#   (symlink `ccopy`, `ccut` and `cpaste` at least to `clipboard-files`)
# ----------------------------------------------------------------------------

=
c       Copy files
        TEMP_FILE=$(mktemp)
        for i in %s ; do
            if [ "${i}" != ".." ]; then
                # bash too has a nice printf, but we're not in bash now
                # (this is a dumb posix printf, but its simple quote-escape is enough)
                /usr/bin/printf '%q\n' "${i}" >> $TEMP_FILE
            fi
        done
        # if not empty, then use xargs to turn it into a list param
        if [ -s $TEMP_FILE ];
            then cat $TEMP_FILE | xargs ccopy
        fi
        rm $TEMP_FILE

=
U       Cut files
        TEMP_FILE=$(mktemp)
        for i in %s ; do
            if [ "${i}" != ".." ]; then
                /usr/bin/printf '%q\n' "${i}" >> $TEMP_FILE
            fi
        done
        if [ -s $TEMP_FILE ];
            then cat $TEMP_FILE | xargs ccut
        fi
        rm $TEMP_FILE

=
p       Paste files here
        cpaste

# decompress anything
# - uses [atool](https://www.nongnu.org/atool/)
# - deps: `apt install tar gzip bzip2 lzip plzip lzop lzma zip unzip rar unrar unace arj rpm cpio arc nomarch p7zip unalz atool`
#   (assuming file and perl has already been installed)
# ----------------------------------------------------------------------------
= t r
x       Extract here
        for i in %s ; do
            aunpack -q $i
        done

= t r
X       Extract to other panel
        for i in %s ; do
            aunpack -q $i --extract-to=%D
        done

# compress with zip
# - zip is hardcoded for now
# - TODO: probably this can be done in a nicer way like I did with ccopy above
# ----------------------------------------------------------------------------
=
z       Zip
        ARCHIVE_NAME="archive_$(date +%%F).zip"
        TEMP_FILE=$(mktemp)
        D=%D
        LAST_RAW_FN=""
        L=0
        for i in %s ; do
            # zip will happily use the newline delimited
            # list without any special escaping needs
            LAST_RAW_FN=${i}
            echo ${i} >> $TEMP_FILE
            L=$((L + 1))
        done
        if [ $L -eq 1 ]; then
            # it was just a single file under the cursor then
            # we can ignore the temp file and use the "last" filename
            zip -X -q -r "${D}/${LAST_RAW_FN}.zip" "${LAST_RAW_FN}"
        else
            # multiple files selected: use the temp-file
            zip -X -q -r "${D}/${ARCHIVE_NAME}" -@ < $TEMP_FILE
        fi
        rm $TEMP_FILE

# Mostly same as above, but with extra parameters
# (the % + { prompt in mc is just way too dumb for this)
=
Z       Zip with params
        NOCOLOR='\e[0m'
        CYAN='\e[0;36m'
        echo "${CYAN}Enter extra parameters!${NOCOLOR}"
        echo "Some useful ones:"
        echo "${CYAN}-e${NOCOLOR}    = encrypt"
        echo "${CYAN}-0${NOCOLOR}    = store"
        echo "${CYAN}-9${NOCOLOR}    = maximum compression"
        echo "${CYAN}-m${NOCOLOR}    = move"
        echo "${CYAN}-s 2g${NOCOLOR} = split 2gb"
        echo "${CYAN}-X${NOCOLOR}    = no extra attributes (uid, gid)"
        echo "${CYAN}-y${NOCOLOR}    = do not resolve symlinks"
        read PARAMS
        ARCHIVE_NAME="archive_$(date +%%F).zip"
        TEMP_FILE=$(mktemp)
        D=%D
        LAST_RAW_FN=""
        L=0
        for i in %s ; do
            LAST_RAW_FN=${i}
            echo ${i} >> $TEMP_FILE
            L=$((L + 1))
        done
        if [ $L -eq 1 ]; then
            zip $PARAMS -r "${D}/${LAST_RAW_FN}.zip" "${LAST_RAW_FN}"
        else
            zip $PARAMS -r "${D}/${ARCHIVE_NAME}" -@ < $TEMP_FILE
        fi
        rm $TEMP_FILE

##############################################################################
# Default menu items below
##############################################################################
#
# 0       Edit a bug report and send it to root
#          I=`mktemp "${MC_TMPDIR:-/tmp}/mail.XXXXXX"` || exit 1
#          ${EDITOR-vi} "$I"
#          test -r "$I" && mail root < "$I"
#          rm -f "$I"
#
#  =+ f \.1$ | f \.3$ | f \.4$ | f \.5$ | f \.6$ | f \.7$ | f \.8$ | f \.man$ & t r
#  1       Display the file with roff -man
#          %view{ascii,nroff} roff -c -Tlatin1 -mandoc %f
#
#  2       Call the info hypertext browser
#          info
#
#  = t d
#  3       Compress the current subdirectory (tar.gz)
#          Pwd=`basename %d /`
#          echo -n "Name of the compressed file (without extension) [$Pwd]: "
#          read tar
#          [ "$tar"x = x ] && tar="$Pwd"
#          cd .. && \
#          tar cf - "$Pwd" | gzip -f9 > "$tar.tar.gz" && \
#          echo "../$tar.tar.gz created."
#
#  4       Compress the current subdirectory (tar.bz2)
#          Pwd=`basename %d /`
#          echo -n "Name of the compressed file (without extension) [$Pwd]: "
#          read tar
#          [ "$tar"x = x ] && tar="$Pwd"
#          cd .. && \
#          tar cf - "$Pwd" | bzip2 -f > "$tar.tar.bz2" && \
#          echo "../$tar.tar.bz2 created."
#
#  5       Compress the current subdirectory (tar.7z)
#          Pwd=`basename %d /`
#          echo -n "Name of the compressed file (without extension) [$Pwd]: "
#          read tar
#          [ "$tar"x = x ] && tar="$Pwd"
#          cd .. && \
#          tar cf - "$Pwd" | 7za a -si "$tar.tar.7z" && \
#          echo "../$tar.tar.7z created."
#
#  6       Compress the current subdirectory (tar.xz)
#          Pwd=`basename %d /`
#          echo -n "Name of the compressed file (without extension) [$Pwd]: "
#          read tar
#          [ "$tar"x = x ] && tar="$Pwd"
#          cd .. && \
#          tar cf - "$Pwd" | xz -f > "$tar.tar.xz" && \
#          echo "../$tar.tar.xz created."
#
#  = f \.c$ & t r
#  + f \.c$ & t r & ! t t
#  c       Compile and link current .c file
#          make "`basename %f .c`" 2>/dev/null || cc -O -o "`basename %f .c`" %f
#
#  + t r & ! t t
#  a       Append file to opposite
#          cat %f >> %D/%f
#
#  + t t
#  A       Append files to opposite files
#          for i in %t ; do
#              cat "$i" >> %D/"$i"
#          done
#
#  + t r & ! t t
#  d       Delete file if a copy exists in the other directory.
#          if [ %d = %D ]; then
#              echo "The two directories must be different."
#              exit 1
#          fi
#          if [ -f %D/%f ]; then        # if two of them, then
#              if cmp -s %D/%f %f; then
#                  rm %f && echo %f": DELETED."
#              else
#                  echo %f" and "%D/%f" differ: NOT deleted."
#                  echo -n "Press RETURN "
#                  read key
#              fi
#          else
#              echo %f": No copy in "%D/%f": NOT deleted."
#          fi
#
#  + t t
#  D       Delete tagged files if a copy exists in the other directory.
#          if [ %d = %D ]; then
#              echo "The two directores must be different."
#              exit 1
#          fi
#          for i in %t ; do
#              if [ -f %D/"$i" ]; then
#                  SUM1=`sum "$i"`
#                  SUM2=`sum %D/"$i"`
#                  if [ "$SUM1" = "$SUM2" ]; then
#                      rm "$i" && echo "${i}: DELETED."
#                  else
#                      echo "$i and "%D"/$i differ: NOT deleted."
#                  fi
#              else
#                  echo "$i has no copy in "%D": NOT deleted."
#              fi
#          done
#
#  m       View manual page
#          MAN=%{Enter manual name}
#          %view{ascii,nroff} MANROFFOPT='-c -Tlatin1' MAN_KEEP_FORMATTING=1 man -P cat "$MAN"
#
#  = f \.gz$ & t r
#  + ! t t
#  n       Inspect gzip'ed newsbatch file
#          dd if=%f bs=1 skip=12 | zcat | ${PAGER-more}
#          # assuming the cunbatch header is 12 bytes long.
#
#  = t r &
#  + ! t t
#  h       Strip headers from current newsarticle
#          CHECK=`awk '{print $1 ; exit}' %f` 2>/dev/null
#          case "$CHECK" in
#              Newsgroups:|Path:)
#                  I=`mktemp "${MC_TMPDIR:-/tmp}/news.XXXXXX"` || exit 1
#                  cp %f "$I" && sed '/^'"$CHECK"' /,/^$/d' "$I" > %f
#                  [ "$?" = "0" ] && rm "$I"
#                  echo %f": header removed."
#                  ;;
#              *)
#                  echo %f" is not a news article."
#                  ;;
#          esac
#
#  + t t
#  H       Strip headers from the marked newsarticles
#          for i in %t ; do
#              CHECK=`awk '{print $1 ; exit}' "$i"` 2>/dev/null
#              WFILE=`mktemp "${MC_TMPDIR:-/tmp}/news.XXXXXX"` || exit 1
#              case "$CHECK" in
#                  Newsgroups:|Path:)
#                      cp "$i" "$WFILE" && sed '/^'"$CHECK"' /,/^$/d' "$WFILE" > "$i"
#                      if [ "$?" = "0" ]; then
#                          rm "$WFILE"; echo "$i header removed. OK."
#                      else
#                          echo "Oops! Please check $i against $WFILE."
#                      fi
#                      ;;
#                  *)
#                      echo "$i skipped: Not a news article."
#                      ;;
#              esac
#          done
#
#  = t r
#  + ! t t
#  r       Copy file to remote host
#          echo -n "To which host?: "
#          read Host
#          echo -n "To which directory on $Host?: "
#          read Dir
#          rcp -p %f "${Host}:${Dir}"
#
#  + t t
#  R       Copy files to remote host (no error checking)
#          echo -n "Copy files to which host?: "
#          read Host
#          echo -n "To which directory on $Host? :"
#          read Dir
#          rcp -pr %u "${Host}:${Dir}"
#
#  = f \.tex$ & t r
#  + f \.tex$ & t r & ! t t
#  t       Run latex on file and show it with xdvi
#          latex %f && xdvi "`basename %f .tex`".dvi
#
#  =+ f ^part | f ^Part | f uue & t r
#  + t t
#  U       Uudecode marked news articles (needs work)
#          (
#              for i in %t ; do # strip headers
#                  FIRST=`awk '{print $1 ; exit}' "$i"`
#                  cat "$i" | sed '/^'"$FIRST"' /,/^$/d'
#              done
#          ) | sed '/^$/d' | sed -n '/^begin 6/,/^end$/p' | uudecode
#          if [ "$?" != "0" ]; then
#              echo "Cannot decode "%t"."
#          fi
#          echo "Please test the output file before deleting anything."
#
#  =+ f \.tar\.gz$ | f \.tar\.z$ | f \.tgz$ | f \.tpz$ | f \.tar\.lz$ | f \.tar\.lz4$ | f \.tar\.lzma$ | f \.tar\.7z$ | f \.tar\.xz$ | f \.tar\.Z$ | f \.tar\.bz2$ & t r
#  x       Extract the contents of a compressed tar file
#          unset PRG
#          case %f in
#              *.tar.7z)   PRG="7za e -so";;
#              *.tar.bz2)  PRG="bunzip2 -c";;
#              *.tar.gz|*.tar.z|*.tgz|*.tpz|*.tar.Z) PRG="gzip -dc";;
#              *.tar.lz)   PRG="lzip -dc";;
#              *.tar.lz4)  PRG="lz4 -dc";;
#              *.tar.lzma) PRG="lzma -dc";;
#              *.tar.xz)   PRG="xz -dc";;
#              *)          exit 1;;
#          esac
#          $PRG %f | tar xvf -
#
#  = t r
#  + ! t t
#  y       Gzip or gunzip current file
#          unset DECOMP
#          case %f in
#              *.gz|*.[zZ]) DECOMP=-d;;
#          esac
#          # do *not* add quotes around $DECOMP!
#          gzip $DECOMP -v %f
#
#  + t t
#  Y       Gzip or gunzip tagged files
#          for i in %t ; do
#              unset DECOMP
#              case "$i" in
#                  *.gz|*.[zZ]) DECOMP=-d;;
#              esac
#              gzip $DECOMP -v "$i"
#          done
#
#  + ! t t
#  b       Bzip2 or bunzip2 current file
#          unset DECOMP
#          case %f in
#              *.bz2) DECOMP=-d;;
#          esac
#          bzip2 $DECOMP -v %f
#
#  + t t
#  B       Bzip2 or bunzip2 tagged files
#          for i in %t ; do
#              unset DECOMP
#              case "$i" in
#                  *.bz2) DECOMP=-d;;
#              esac
#              bzip2 $DECOMP -v "$i"
#          done
#
#  + f \.tar.gz$ | f \.tgz$ | f \.tpz$ | f \.tar.Z$ | f \.tar.z$ | f \.tar.bz2$ | f \.tar.F$ & t r & ! t t
#  z       Extract compressed tar file to subdirectory
#          unset D
#          set gzip -cd
#          case %f in
#              *.tar.F)   D=`basename %f .tar.F`; set freeze -dc;;
#              *.tar.Z)   D=`basename %f .tar.Z`;;
#              *.tar.bz2) D=`basename %f .tar.bz2`; set bunzip2 -c;;
#              *.tar.gz)  D=`basename %f .tar.gz`;;
#              *.tar.z)   D=`basename %f .tar.z`;;
#              *.tgz)     D=`basename %f .tgz`;;
#              *.tpz)     D=`basename %f .tpz`;;
#          esac
#          mkdir "$D"; cd "$D" && ("$1" "$2" ../%f | tar xvf -)
#
#  + t t
#  Z       Extract compressed tar files to subdirectories
#          for i in %t ; do
#              set gzip -dc
#              unset D
#              case "$i" in
#                  *.tar.F)   D=`basename "$i" .tar.F`; set freeze -dc;;
#                  *.tar.Z)   D=`basename "$i" .tar.Z`;;
#                  *.tar.bz2) D=`basename "$i" .tar.bz2`; set bunzip2 -c;;
#                  *.tar.gz)  D=`basename "$i" .tar.gz`;;
#                  *.tar.z)   D=`basename "$i" .tar.z`;;
#                  *.tgz)     D=`basename "$i" .tgz`;;
#                  *.tpz)     D=`basename "$i" .tpz`;;
#            esac
#            mkdir "$D"; (cd "$D" && "$1" "$2" "../$i" | tar xvf -)
#          done
#
#  + f \.gz$ | f \.tgz$ | f \.tpz$ | f \.Z$ | f \.z$ | f \.bz2$ & t r & ! t t
#  c       Convert gz<->bz2, tar.gz<->tar.bz2 & tgz->tar.bz2
#          unset D
#          unset EXT
#          case %f in
#              *.Z)   EXT=Z;;
#              *.bz2) EXT=bz2;;
#              *.gz)  EXT=gz;;
#              *.tgz) EXT=tgz;;
#              *.tpz) EXT=tpz;;
#              *.z)   EXT=z;;
#          esac
#          case "$EXT" in
#              bz2|Z|gz|z) D=`basename %f ."$EXT"`;;
#              tgz|tpz)    D=`basename %f ."$EXT"`.tar;;
#          esac
#          if [ "$EXT" = "bz2" ]; then
#              bunzip2 -v %f
#              gzip -f9 -v "$D"
#          else
#              gunzip -v %f
#              bzip2 -v "$D"
#          fi
#
#  + t t
#  C       Convert gz<->bz2, tar.gz<->tar.bz2 & tgz->tar.bz2
#          for i in %t ; do
#              unset D
#              unset EXT
#              case "$i" in
#                  *.Z)   EXT=Z;;
#                  *.bz2) EXT=bz2;;
#                  *.gz)  EXT=gz;;
#                  *.tgz) EXT=tgz;;
#                  *.tpz) EXT=tpz;;
#                  *.z)   EXT=z;;
#              esac
#              case "$EXT" in
#                  bz2|Z|gz|z) D=`basename "$i" ."$EXT"`;;
#                  tgz|tpz)    D=`basename "$i" ."$EXT"`.tar;;
#              esac
#              if [ "$EXT" = "bz2" ]; then
#                  bunzip2 -v "$i"
#                  gzip -f9 -v "$D"
#              else
#                  gunzip -v "$i"
#                  bzip2 -v "$D"
#              fi
#          done
#
#  + x /usr/bin/open | x /usr/local/bin/open & x /bin/sh
#  o       Open next a free console
#          open -s -- sh
#
